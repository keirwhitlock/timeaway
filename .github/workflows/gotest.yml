# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: go-test

on:
  # push:
  #   branches:
  #     - main
    tags:
      - v*
  # pull_request:
  #   branches:
  #     - main

permissions:
  contents: write

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3 # needed for cache
      - name: set up go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: test
        run: go test -v ./...
        # run: make test
      # use this option to share coverage reports with team members
      # - name: coverage check
      #   run: make coverage
      # - name: make report
      #   run: make report
      # - name: copy files
      #   run: |
      #     mkdir reports
      #     cp cover.html reports/
      # - name: archive
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: reports
      #     path: reports

  # https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow#example-not-requiring-successful-dependent-jobs
  golangci:
    needs: test  # requires test to be successful 
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 
      - uses: actions/setup-go@v4 
        with:
          go-version: '1.21'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.54

  build-artifact:
    # https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
    needs: golangci
    name: artifacts
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3 # needed for cache
      - name: set up go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
      - name: build
        run: make build
      - name: Copy Files
        run: |
          mkdir artifacts
          cp timeaway artifacts/timeaway-linux-amd64
      - name: archive
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: artifacts/
          if-no-files-found: error
          retention-days: 5

  release:
    # copy the artifact to a release
    # for github workflow variables see https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
    name: release
    # only run on addition of a tag
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-artifact
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3 # needed for cache
      - name: download binary
        # https://github.com/actions/download-artifact
        # You can use the upload-artifact and download-artifact actions to share data between jobs in a workflow
        uses: actions/download-artifact@v3
        with:
          name: artifacts # remote path
          path: artifacts # local path
      - name: show download
        run: ls -R
      - name: create release
        uses: softprops/action-gh-release@v1 
        # if: startsWith(github.ref, 'refs/tags/') # only if tagged 
        with:
          files: artifacts/timeaway-linux-amd64
          # draft: true
          name: Release for ${{ github.ref_name }} (automated)
          prerelease: true
          body: |
            This is an automated release from a workflow. This workflow
            was generated by the ${{ github.action }} action using
            workflow ${{ github.workflow }} using ${{ runner.os }}.
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-function:
    name: deploy faas
    runs-on: ubuntu-latest
    needs: build-artifact
    # if ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: show checkout
        run: ls -R
      - id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          # service_account: ${{ secrets.gcp_service_account }}
          credentials_json: ${{ secrets.gcp_credentials }}
      - name: deploy
        uses: google-github-actions/deploy-cloud-functions@main
        with:
          name: timeaway
          entry_point: GCPServer
          project_id: github-timeaway-399312
          runtime: go121
          # credentials: ${{ secrets.gcp_credentials }}
      - name: echo output
        run: echo ${{ steps.deploy.outputs }}
      - id: test
        run: curl "${{ steps.deploy.outputs.url }}/"

